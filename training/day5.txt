
Rest Api - 

	Roy Fielding -
	
	- Rest (stateless) vs SOAP (state): 
		
	REST (Representational State Transfer): 
	
	In his doctoral dissertation at the University of California, Irvine, Fielding introduced the concept of REST. 
		REST is an architectural style for designing networked applications. 
	It relies on a stateless, client-server, cacheable communications protocol -- the HTTP protocol. 

RESTful systems are characterized by:

	Resources: Any piece of information that can be named and represented.
	
	Representation: The state of the resource at any particular time.
	
	Stateless Interactions: Each request from a client to a server must contain all the information the server needs to understand and process the request.

	Uniform Interface: A standardized way of interacting with resources (e.g., using HTTP methods such as GET, POST, PUT, DELETE).
	
HTTP methods -
	
	PUT
	DELETE
	GET 
	POST
	
	
-------------------------------------------------------------------------------------------------------------


Spring boot - 
-------------

Spring - Configuration fiels + (AutoConfiguration + Starters + Actuators + DevTools + Cloud tools + CLI) = spring boot.

Spring boot - Ten years of spring experience. (DRY - Do Not Repeaet Yourself principle)

Spring boot  = Agile development + dependencies starters + inbuilt tomcat server + inmemory database (called H2db)

Spring boot -> Microservices -> RESTful


	@RestController - request handler // API //endpoint 
	
	@RestController = Controller + ResponseBody - <body> , http headers other get you will have a body, (another name for body  - payload),
	
	We can send or write into response body using ResponseEntity class.
	
	Controller -> commit or render views using view technologies(HTML or JSP or Tiles or Velocity).
	
										
										Requests in PostMan: (server.port=8090) //
										
															@RestController
															@RequestMapping("/rest/api.1.0")
										
										
												syntax: http://localhost:server.port/ 
	
													http://localhost:8090
													
													http://localhost:8090/rest/api.1.0
													
													http://localhost:8090/rest/api.1.0/Male 
													
													http://localhost:8090/rest/api.1.0/Prince/Male
	
	Annotations: 
	-------------
	
		1.@GetMapping  - handler resource for HTTP GET requests- 
			
			How to get input through get method ?
				
					1. query string (?name=value) is send via requested url.
					2. main url followed by a forward slash (/).
					@PathVariable to recieve this input.
					
					
					
		
		
		
		
		
		2.@PostMapping - handler resource for POST requests.
		
		3.@PutMapping   - for PUT requests.
		
		4.@DeleteMapping  - for DELETE requests.
	
	
	
	
-------------------------------------------------------------------------------------------------------------------

HTTP Headers -
--------------

HTTP headers are a critical component of HTTP requests and responses. They define the operating parameters of an HTTP transaction, 
providing important information about the request or response, and the client or server.

Types of HTTP Headers- 
----------------------

1.General Headers: Apply to both requests and responses, but do not have any relation to the data in the body of the request or response.
2.Request Headers: Contain more information about the resource to be fetched or about the client itself.
3.Response Headers: Contain information about the server and the response data.
4.Entity Headers: Contain information about the body of the resource, such as content length and content type.


Common HTTP Headers:
---------------------

General Headers-
-----------------

		Cache-Control: Directives for caching mechanisms in both requests and responses.

		Connection: Control options for the current connection.


Request Headers-
----------------

		Accept: Media types that are acceptable for the response.

		User-Agent: Information about the user agent originating the request.

		Host: The domain name of the server and the TCP port number on which the server is listening.

		Authorization: Credentials for HTTP authentication.

		Content-Type: The media type of the body of the request.


Response Headers-
-----------------

	Content-Type: The media type of the body of the response.

	Server: Information about the software used by the origin server.

	Set-Cookie: Set HTTP cookies.


Entity Headers-
----------------

	Content-Length: The size of the resource, in decimal number of bytes.


	Content-Encoding: The type of encoding used on the data.


Http Status Codes: 
--------------------

Important and Popular Status Codes:		
------------------------------------										 


	100 Continue																/1XX - INFORMATIONAL
	
	
	200 OK: Most common status indicating success.
	201 Created: Indicates successful creation of a resource.					/2XX - SUCCESS
	202 Accepted
	204 No Content: Success with no content to return.
	
	
	301 Moved Permanently: Indicates permanent redirection.
	302 Found: Temporary redirection.											/3XX - REDIRECTIONAL
	304 Not Modified: Resource not modified since last request.
	
	
	400 Bad Request: General client error.
	401 Unauthorized: Authentication required.
	403 Forbidden: Client not authorized to access the resource.
	404 Not Found: Resource not found.											/4XX - CLIENT ERROR
	405 Method Not Allowed: HTTP method not allowed.
	409 Conflict: Request conflicts with current state of the server.
	429 Too Many Requests: Rate limiting.
	
	
	500 Internal Server Error: General server error.
	502 Bad Gateway: Invalid response from upstream server.						/5XX - SERVER ERROR
	503 Service Unavailable: Server temporarily unavailable.
	504 Gateway Timeout: Upstream server timed out.
	
	
	-------------------------------------------------------------------
	java -jar target\demo-0.0.1-SNAPSHOT.jar